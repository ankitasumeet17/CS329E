# -*- coding: utf-8 -*-
"""329e_HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gJylZtvy4ieqkurP2K3I9tZVM-xQ7ofL

# Homework 1

## Pair Programming Group Number: 15
## Members of Team: Ankita Sumeet, Chloe Jin


### Data maniupuation and Visualization!

In our first assignment you will practice manipuating and visualizing data from a real wold data set, Melbourne Australia home sales records. 

### The Data

Was taken from a Kaggle competition, and came with the following descriptions:
Content & Acknowledgements

```
This data was scraped from publicly available results posted every week from Domain.com.au, I've cleaned it as best I can, now it's up to you to make data analysis magic. The dataset includes Address, Type of Real estate, Suburb, Method of Selling, Rooms, Price, Real Estate Agent, Date of Sale and distance from C.B.D.

â€¦.Now with extra data including including property size, land size and council area, you may need to change your code!

Some Key Details
Suburb: Suburb

Address: Address

Rooms: Number of rooms

Price: Price in Australian dollars

Method:
S - property sold;
SP - property sold prior;
PI - property passed in;
PN - sold prior not disclosed;
SN - sold not disclosed;
NB - no bid;
VB - vendor bid;
W - withdrawn prior to auction;
SA - sold after auction;
SS - sold after auction price not disclosed.
N/A - price or highest bid not available.

Type:
br - bedroom(s);
h - house,cottage,villa, semi,terrace;
u - unit, duplex;
t - townhouse;
dev site - development site;
o res - other residential.

SellerG: Real Estate Agent

Date: Date sold

Distance: Distance from CBD in Kilometres

Regionname: General Region (West, North West, North, North east â€¦etc)

Propertycount: Number of properties that exist in the suburb.

Bedroom2 : Scraped # of Bedrooms (from different source)

Bathroom: Number of Bathrooms

Car: Number of carspots

Landsize: Land Size in Metres

BuildingArea: Building Size in Metres

YearBuilt: Year the house was built

CouncilArea: Governing council for the area

Lattitude: Self explanitory

Longtitude: Self explanitory
```

## Q1 - Loading Data
Run the following code section to load dataset into a pandas DataFrame named `df`. If you need to look up other
syntax on how to read csv files you can find it [here](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html).
"""

# remember to type in your standard library import for pandas first
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt

url = 'https://gist.githubusercontent.com/TieJean/ba718aac753c2f90e3d4e040d8f7d982/raw/2aca4164b087fa86721e877b4f1a6bd46d687035/melb_data.csv'

# your code goes here - read the data from the URL 
df = pd.read_csv(url)

"""## Q2 - How many unique suburbs are there?

Are there any pandas DataFrame operations that can do this for you?

[This](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.nunique.html) function might help. 
"""

# code goes here
df_unique = df.nunique(dropna=True)
df_unique['Suburb']

"""## Q3 - How many unique properties are there?

If you forget the names of the columns you can always type:

`df.columns` 

in a cell by itself to see this list of column names.
"""

# code goes here
df_unique['Address']

"""## Q4 - What is the mean price of a property in the Kensington suburb?

You are getting the hang of reading the documentation!  Try finding the function
for mean yourself at the [root page](https://pandas.pydata.org/pandas-docs/stable/index.html) of the documentation.
"""

# code goes here
# drop duplicates by using df_unique? either works.
df_ken = df[df['Suburb']=='Kensington']
df_ken['Price'].mean().round(decimals=3)

"""## Q5 - What percentage of properties contain a YearBuilt value?"""

# code goes here
df_yb = df[df['YearBuilt'].notna()]
(len(df_yb)/len(df))* 100

"""## Q6 - Plot the Landsize as a histogram using 20 bins. Say something interesting about the graph.

Matplotlib is [here](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.hist.html) to help. 

In data visualization we discuss the "Ink Ratio" of creating graphics.  If you use the definalt bin sizes of the matplotlib histogram function, you will find that the histogram is not very informative.  Use the documentation to guide you to adjust the width of the bins in the histogram to make one _really_ wide bin on the right, and the rest of the bins equally distributed where most of the data resides. 
"""

# code goes here
plt.hist(df['Landsize'], bins=[0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000]) 
# df['Landsize'].max()
plt.title("Landsize Histogram")
plt.ylabel("Landsize Frequency")
plt.xlabel("Landsize in Meters (values above 2000 not shown)")



"""## Q7 - Plot a scatter plot of price as a function of BuildingArea using only rows that have a valid BuildingArea value

Break this down into slicing the DataFrame first, then creating the visualization.  There are both `plot` and `scatter` functions in the matplotlib library that can help here.  You'll notice there is more than one way to do a thing so much in computer science ðŸ˜„

If you have to change your axes and end up excluding some points to make the data more visible, then annotate the number of points excluded in the graph. 
"""

# code goes here
df_valid_ba = df[df['BuildingArea'].notna()]
plt.scatter(df_valid_ba['BuildingArea'], df_valid_ba['Price'])

plt.axis([0, 1750, 0, 10000000])
plt.title('Price v. Building Area')
plt.xlabel('Building Area in Meters')
plt.ylabel('Price in Tens of Millions of Dollars')
plt.text(600,8000000,'Displayed plot excludes 4 data points:')
plt.text(600,7000000,'(44515, 1355000), (6791, 1280000)')
plt.text(600,6000000,'(3558, 930000), (3112, 2608000)')

# Displayed plot excludes 4 data points:
# 1. Building area 44515, Price 1355000
# 2. Building area 6791, Price 1280000
# 3. Building area 3558, Price 930000
# 4. Building area 3112, Price 2608000

"""## Q8 - List the top 10 SellerG, and what percentage of properties they have listed 

I'm going to assume that the SellerG column is the name of the seller group, so "realtor" in US parlance.  So, that column is interpreted as the seller that listed the property.

Check out the function `value_counts` in pandas documentation. 
"""

# code goes here
df_seller = df["SellerG"].value_counts(normalize = True) * 100
df_seller.head(10)

"""## Q9 - Fix a problem
Your boss has told you that the number of rooms was calculated incorrectly systematically across the entire data set.  Add one room to the Rooms column using two methods:

 - a for loop, and
 - using a single statement
 
Save those DataFrames into the variables `df1` and `df2`.  (We don't use these again, for the next questions just continue using `df`)

Watch out that you don't accidentally change the original DataFrame using a shallow copy.
"""

# code goes here
df1 = df.copy(deep=True)

for i in range (df1.shape[0]):
  df1.at[i,"Rooms"] = df1.iloc[i]['Rooms'] + 1

df2 = df.copy(deep=True)
df2["Rooms"] = df["Rooms"] + 1

"""## Q10- What is the Address of the earliest built house in the data set?

This will exercise your DataFrame slicing ability. 
"""

# code goes here
df.loc[df["YearBuilt"] == df["YearBuilt"].dropna().min()].Address

"""## Q11 - Save a file 

The council member for Melbourne has asked for the information for their district.  Assume that there are legal restrcitions and we can only provide the council member the Suburb, Price, and Date from the CouncilArea "Melbourne" to the council person.  Export the file with only the allowed columns, and do not write and index column.

The other half of `read_csv`, is `to_csv`.  Make sure you follow the documentation and only include the columns asked for in the output.
"""

# code goes here
df_res = df.copy()
df_res = df_res[(df['CouncilArea'] == 'Melbourne')]
df_res = df_res[['Suburb', 'Price', 'Date']]
df_res.to_csv('my_output_file.csv', index = False)